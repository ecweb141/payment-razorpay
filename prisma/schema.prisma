generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = "mongodb+srv://ai-chat:chetan!2@cluster0.nr2xx20.mongodb.net/sharedFiles"
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts Account[]
  Product  Product[]
  Order    Order[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model order {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  products   Product[]
  total      Float
  productQty Int
  subTotal   Float
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Order {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

model Product {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  price    String
  qty      String
  ownId    String
  parentId String?
  images   Images[]
  User     User?    @relation(fields: [userId], references: [id])
  userId   String?  @db.ObjectId
  order    order?   @relation(fields: [orderId], references: [id])
  orderId  String?  @db.ObjectId
}

model Image {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  images    Images @relation(fields: [imagesIds], references: [id])
  imagesIds String
}

model Images {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  color     String
  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId
  Image     Image[]
}
